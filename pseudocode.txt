text /* Comment Type 1 */
text // Comment Type 2
text # Comment Type 3
text ; Comment Type 4

begin Program
; Keywords
    read obtain get from take use copy        ; Input
    print display show save return            ; Output
    compute calculate determine append        ; Compute
    set initialize init let is has            ; Initialize
    increment bump decrement                  ; Add/Sub one
    if then else otherwise when unless        ; If-Then-Else
    while done endwhile do                    ; (Do) While
    case of others endcase                    ; Case
    repeat until                              ; Repeat Until
    for endfor                                ; For
    call exception as recurse                 ; Program Flow
    this that except in                       ; Selectors
    convert cast ensure expecting expect      ; Type Ops
; Constants
    true false                                ; Booleans
    nonexistant unbound missing null          ; Unbound
    success failure                           ; Status
    newline beep indent                       ; Formatting
    user screen system                        ; Assumptions
; Data Types
    number string character boolean           ; Basics
    truthy falsey                             ; Extended Boolean
    list array sequence every each            ; Collections
    nothing maybe symbol many any             ; Abstractions
    constant operator procedure               ; Programming
    file stream pipe port line interrupt      ; OS
    sum difference product quotient remainder ; Results
    numberish symbolesque file-like lists           ; Suffixes
    value name result message field a         ; Programming Refs
; Operators
    > < == != <> <= >= = !< !> ≡ ≯ ≮ ≥ ≤ ≠           ; Comparison
    less than more than greater than          ; Comparison Words 1
    equal to different than different from    ; Comparison Words 2
    ^ * + - / % × ÷                           ; Arithmetic
    plus minus times divided by modulo        ; Arithmetic Words 1
    add subtract multiply divide              ; Arithmetic Words 2
    take the remainder of raised to           ; Artihmetic Words 3
    power squared cubed root square cube      ; Arithmetic Words 4
    ¬ ⊻ ∨ ∧                                   ; Logical
    not xor and or exclusive                  ; Logical Words
    <- -> -> <- → ←                               ; Arrows
    resulting in fed right left               ; Arrows Words
; Punctuation
;; Singletons
    ( ) , : { } [ ] ? . \
;; Strings
   'Single Quotes'
   "Doublw Quotes"
   "Contraction's Quotes"
   'Nested "Quotations"'
;; Numbers
   525600
   8675309
   3.1415962
   6.5*10^8
   6.5e8
   `1/2`
   `1/3`
   `1/4`
   `5/8`
   `5/6`
   `4/5`
   `1/8`
   `1/5`
   `1/2`
   `1/4`
   `1/6`
   `1/3`
   `7/8`
   `3/8`
   `3/5`
   `3/4`
   `2/5`
   `2/3`
   `phi`
   `pi`
   `14/56`
; Named Functions
    [Bluebird] [B] [hello] [⌊]
; Edge Cases
begin Program.
      CarInfo has fields Brand, Model, Year, StartingOdometer,
                   EndingOdometer, GallonsUsed, Distance, MPG.
      begin Input.
            for each CarInfo field except Distance, MPG:
                   display this Prompt to user.
                   get this Value from user as a string.
            for each CarInfo field in
                   StartingOdometer, EndingOdometer, GallonsUsed:
                   convert this value to a number.
      end Input.
      begin Calculation.
            let Distance = EndingOdometer - StartingOdometer.
            let MPG as Distance / GallonsUsed.
      end Calculation.
      begin Display.
            for each CarInfo field:
                   let Entry = this name.
                   append ": " to Entry.
                   append this value to Entry.
                   append newline to Entry.
                   display Entry to user.
            let Calculation = "(".
            append CarInfo -> EndingOdometer to Calculation.
            append "-" to Calculation.
            append CarInfo -> StartingOdometer to Calculation.
            append ") / " to Calculation.
            append CarInfo -> GallonsUsed to Calculation.
            append " = " to Calculation.
            append CarInfo -> MPG to Calculation.
            append newline to Calculation.
            display Calculation to user.
      end Display.
            
end Program.
; Local Variables:
; mode: pseudocode
; End:
